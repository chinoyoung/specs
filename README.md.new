# Screenshot Tool

A modern Next.js web application for capturing screenshots of specific elements on websites using CSS selectors.

## Features

- **Ad Components Tool**: Specifically designed for capturing advertising components organized by category.
- **General Screenshot Tool**: Capture any webpage elements by providing CSS selectors.
- **Selector Testing**: Test your CSS selectors before capturing screenshots.
- **Batch Processing**: Capture screenshots from multiple URLs at once.
- **Customization**: Configure viewport size and wait time for dynamic content.
- **Configuration Management**: Save and load your configurations for repeated use.
- **Responsive Design**: Optimized for both desktop and mobile devices.
- **Download Options**: Download individual screenshots or all screenshots as a ZIP file.

## Getting Started

### Prerequisites

- Node.js (v14 or higher)
- npm (v6 or higher)

### Installation

1. Clone this repository
2. Install dependencies:
```
npm install
```

### Running the Application

To start the application:

```
npm run dev
```

This will start:
- The Next.js app at http://localhost:3000

## Usage

### Ad Components Tool

1. Navigate to the "Ad Components" page
2. Enter the URL of the website you want to capture screenshots from
3. Select an ad category or manually enter selectors for specific ad components
4. Configure viewport size and wait time if needed
5. Click "Capture Screenshots"
6. View and download your screenshots organized by category

### General Screenshot Tool

1. Navigate to the "General Screenshot Tool" page
2. Choose between "Single URL" or "Batch Mode"
3. Enter the URL(s) and CSS selector(s)
4. Configure viewport size and wait time
5. Click "Capture Screenshots" or "Process Batch"
6. View and download your screenshots

### Testing Selectors

1. On the General Screenshot Tool page, click "Test Selectors"
2. The tool will check if your selectors match any elements on the page
3. Review the results to see which selectors work properly

## Technical Details

This application is built using:

- **Next.js**: For the frontend and API routes
- **Tailwind CSS**: For styling and responsive design
- **Puppeteer**: For browser automation and screenshot capture
- **React**: For building the user interface components

## Project Structure

```
/
├── app/                      # Next.js app directory 
│   ├── api/                  # API routes for screenshots & selector testing
│   ├── ad-components/        # Ad components page
│   ├── general-screenshots/  # General screenshot tool
│   └── about/                # About page
├── components/               # Reusable React components
├── public/                   # Static assets and screenshots
├── utils/                    # Utility functions
│   ├── api.js                # API client functions
│   ├── screenshotService.js  # Screenshot service using Puppeteer
│   ├── storage.js            # Local storage utilities
│   └── specs/                # Ad specifications
```

## Troubleshooting

- **Screenshots not capturing properly**: Ensure that the selectors are correct and that the elements are visible in the viewport.
- **Slow screenshot processing**: Consider reducing the number of selectors or adjusting the wait time.
- **Puppeteer issues**: Make sure you have the necessary dependencies for Puppeteer installed on your system.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the ISC License - see the LICENSE file for details.
